An aggregate function takes a collection of like values, such as all of the values in a column, as input, and returns a single value or null. 
Examples of aggregate functions include:
sum, minimum, maximum, average, etc.

#SUM
SUM(column_name)
select sum(cost) as sum_of_cost from petrescue

# MIN MAX
select max(quantity) from petrescue
select min(id) from petrescue where animal="Dog"

#AVG()

#scalar and string functions
*Round() Length() Ucase() Lcase()*

# DATE & TIME
DATE: YYYYMMDD
TIME: HHMMSS
TIMESTAMP:YYYYXXDDHHMMSSZZZZZZ
            X=Months
            Z=Milliseconds

--------------------------------------------------------------------------------
Aggregate Functions
Query A1: Enter a function that calculates the total cost of all animal rescues in the PETRESCUE table.
select SUM(COST) from PETRESCUE;

Query A2: Enter a function that displays the total cost of all animal rescues in the PETRESCUE table in a column called SUM_OF_COST.
select SUM(COST) AS SUM_OF_COST from PETRESCUE;

Query A3: Enter a function that displays the maximum quantity of animals rescued.
select MAX(QUANTITY) from PETRESCUE;

Query A4: Enter a function that displays the average cost of animals rescued.
select AVG(COST) from PETRESCUE;

Query A5: Enter a function that displays the average cost of rescuing a dog.
Hint - Bear in my the cost of rescuing one dog on day, is different from another day. So you will have to use and average of averages.
select AVG(COST/QUANTITY) from PETRESCUE where ANIMAL = 'Dog';



Scalar and String Functions
Query B1: Enter a function that displays the rounded cost of each rescue.
select ROUND(COST) from PETRESCUE;

Query B2: Enter a function that displays the length of each animal name.
select LENGTH(ANIMAL) from PETRESCUE;

Query B3: Enter a function that displays the animal name in each rescue in uppercase.
select UCASE(ANIMAL) from PETRESCUE;

Query B4: Enter a function that displays the animal name in each rescue in uppercase without duplications.
select DISTINCT(UCASE(ANIMAL)) from PETRESCUE;

Query B5: Enter a query that displays all the columns from the PETRESCUE table, where the animal(s) rescued are cats. Use cat in lower case in the query.
select * from PETRESCUE where LCASE(ANIMAL) = 'cat';




 Date and Time Functions
Query C1: Enter a function that displays the day of the month when cats have been rescued.
select DAY(RESCUEDATE) from PETRESCUE where ANIMAL = 'Cat';

Query C2: Enter a function that displays the number of rescues on the 5th month.
select SUM(QUANTITY) from PETRESCUE where MONTH(RESCUEDATE)='05';

Query C3: Enter a function that displays the number of rescues on the 14th day of the month.
select SUM(QUANTITY) from PETRESCUE where DAY(RESCUEDATE)='14';

Query C4: Animals rescued should see the vet within three days of arrivals. Enter a function that displays the third day from each rescue.
select DATE_add(RESCUEDATE, INTERVAL 3 DAY) from PETRESCUE;

Query C5: Enter a function that displays the length of time the animals have been rescued; the difference between todayâ€™s date and the rescue date.
select DATEDIFF(CURRENT_TIMESTAMP,RESCUEDATE) from PETRESCUE;



The sub-select doesn't just have to go in the WHERE clause. 
It can also go in other parts of the query, such as in the list of columns to be selected. 
Such sub-queries are called column expressions

*select EMP_ID, SALARY, (select AVG(SALARY) from employees ) AS AVG_SALARY from employees.*
Another option is to make the sub-query be part of the FROM clause.

Sub-queries like these are sometimes called derived tables or table expressions. 
Sub-queries like these are sometimes called derived tables or table expressions. 
Because the outer query uses the results of the sub-query as a data source.


`````````````````````````````````````````````````````````````````````````````````
How does a typical Nested SELECT statement syntax look?
SELECT column_name [, column_name ]
FROM table1 [, table2 ]
WHERE column_name OPERATOR
   (SELECT column_name [, column_name ]
   FROM table1 [, table2 ]
   WHERE condition);
``````````````````````````````````````````````````````````````````````````````````
Exercise:
Execute a failing query (i.e. one which gives an error) to retrieve all employees records whose salary is lower than the average salary.
select * 
from EMPLOYEES 
where salary < AVG(salary);

Execute a working query using a sub-select to retrieve all employees records whose salary is lower than the average salary.
select EMP_ID, F_NAME, L_NAME, SALARY 
from EMPLOYEES
where SALARY < (select AVG(SALARY) 
                from EMPLOYEES);

Execute a failing query (i.e. one which gives an error) to retrieve all employees records with EMP_ID, SALARY and maximum salary as MAX_SALARY in every row.
select EMP_ID, SALARY, MAX(SALARY) AS MAX_SALARY 
from EMPLOYEES;		

Execute a Column Expression that retrieves all employees records with EMP_ID, SALARY and maximum salary as MAX_SALARY in every row.
select EMP_ID, SALARY, ( select MAX(SALARY) from EMPLOYEES ) AS MAX_SALARY 
from EMPLOYEES;

Execute a Table Expression for the EMPLOYEES table that excludes columns with sensitive employee data (i.e. does not include columns: SSN, B_DATE, SEX, ADDRESS, SALARY).
select * from ( select EMP_ID, F_NAME, L_NAME, DEP_ID from EMPLOYEES) AS EMP4ALL;

# WORKING WITH MULTIPLE TABLES
Sub-queries
Implicit Join
Join Operators( INNER JOIN, OUTER JOIN,etc)

# Wroking with multiple tables
 we specify two tables in the FROM clause.
This results in a table join, but note we are not explicitly using the join operator. 
The resulting join in this example is called a full join or Cartesian join, 
because every row in the first table is joined with every row in the second table. 
If you examine the results set, you will see more rows than in both tables individually.

Let's look at an example where we limit the result set to only rows with matching department IDs. Select star from employees, departments, where employees department_ID equals departments, department_ID_department.
we prefix the name of the column with the name of the table. This is to fully qualify the column name, since it's possible that different tables could have some column names that are exactly the same. Since the table names can sometimes be long, we can use shorter aliases for table names as shown here.

Select star from employees E, departments D, where E department_ID equals D department_ID_department. Here, we define the alias E for employees table and D for departments table, and then use these aliases in the WHERE clause.
 If we wanted to see the department name for each employee, we would enter the code as follows: 

Select Employee_ID, Department_Name from employees E, departments D, where E department_ID = D department_ID_department. 

Accessing Multiple Tables with Sub-Queries
Problem:
Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table.
select * from EMPLOYEES where JOB_ID IN (select JOB_IDENT from JOBS);

Retrieve only the list of employees whose JOB_TITLE is Jr. Designer.
select * from EMPLOYEES where JOB_ID IN (select JOB_IDENT from JOBS where JOB_TITLE= 'Jr. Designer');

Retrieve JOB information and who earn more than $70,000.
select JOB_TITLE, MIN_SALARY,MAX_SALARY,JOB_IDENT from JOBS 
where JOB_IDENT IN (select JOB_ID from EMPLOYEES where SALARY > 70000 );

Retrieve JOB information and list of employees whose birth year is after 1976.
select JOB_TITLE, MIN_SALARY,MAX_SALARY,JOB_IDENT from JOBS
where JOB_IDENT IN (select JOB_ID from EMPLOYEES where YEAR(B_DATE)>1976 );

Retrieve JOB information and list of female employees whose birth year is after 1976.
select JOB_TITLE, MIN_SALARY,MAX_SALARY,JOB_IDENT from JOBS 
where JOB_IDENT IN (select JOB_ID from EMPLOYEES where YEAR(B_DATE)>1976 and SEX='F' );


Accessing Multiple Tables with Implicit Joins
Problem:
select * from EMPLOYEES, JOBS;

Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table.
select * from EMPLOYEES, JOBS where EMPLOYEES.JOB_ID = JOBS.JOB_IDENT;

Redo the previous query, using shorter aliases for table names.
select * from EMPLOYEES E, JOBS J where E.JOB_ID = J.JOB_IDENT;

Redo the previous query, but retrieve only the Employee ID, Employee Name and Job Title.
select EMP_ID,F_NAME,L_NAME, JOB_TITLE from EMPLOYEES E, JOBS J where E.JOB_ID = J.JOB_IDENT;

Redo the previous query, but specify the fully qualified column names with aliases in the SELECT clause.
select E.EMP_ID,E.F_NAME,E.L_NAME, J.JOB_TITLE from EMPLOYEES E, JOBS  J where E.JOB_ID = J.JOB_IDENT;

***********************************************************************************************************************************************************************************************************
Most databases come with built-in functions that you can use in SQL statements to perform operations on data within the database itself.
When you work with large datasets, you may save time by using built-in functions rather than first retrieving the data into your application and then executing functions on the retrieved data.
You can use sub-queries to form more powerful queries than otherwise.
You can use a sub-select expression to evaluate some built-in aggregate functions like the average function. 
Derived tables or table expressions are sub-queries where the outer query uses the results of the sub-query as a data source.
************************************************************************************************************************************************************************************************************

